/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all annotations for project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Annotation"][];
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/trace/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all annotations for single trace */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of trace to fetch */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Annotation"][];
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** @description Create an annotation for a single trace */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the trace to annotate */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Annotation data */
            requestBody: {
                content: {
                    "application/json": {
                        comment?: string;
                        isThumbsUp?: boolean;
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Annotation created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Annotation"];
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single annotation based on the ID supplied */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of annotation to fetch */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Annotation"];
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** @description Deletes a single annotation based on the ID supplied */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of annotation to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: string;
                            message?: string;
                        };
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** @description Updates a single annotation based on the ID supplied */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of annotation to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        comment?: string;
                        isThumbsUp?: boolean;
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Annotation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: string;
                            message?: string;
                        };
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/trace/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns single trace details based on the ID supplied */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of trace to share */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trace details with spans and evaluations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example trace_BKZL_X0TKSD4oa1aBJTc_ */
                            trace_id?: string;
                            /** @example KAXYxPR8MUgTcP8CF193y */
                            project_id?: string;
                            metadata?: {
                                /** @example 0.1.11 */
                                sdk_version?: string;
                                /** @example python */
                                sdk_language?: string;
                            };
                            timestamps?: {
                                /** @example 1721382486868 */
                                started_at?: number;
                                /** @example 1721382492894 */
                                inserted_at?: number;
                                /** @example 1721382492894 */
                                updated_at?: number;
                            };
                            input?: {
                                /** @example hi */
                                value?: string;
                            };
                            output?: {
                                /** @example Hey there! 👋😊 */
                                value?: string;
                            };
                            metrics?: {
                                /** @example 1449 */
                                first_token_ms?: number;
                                /** @example 1543 */
                                total_time_ms?: number;
                                /** @example 20 */
                                prompt_tokens?: number;
                                /** @example 7 */
                                completion_tokens?: number;
                                /** @example true */
                                tokens_estimated?: boolean;
                            };
                            /** @example null */
                            error?: {
                                stacktrace?: string[];
                                message?: string;
                                has_error?: boolean;
                            } | null;
                            /** @example [
                             *       "cccd21e0b70c706034dfd9f7772816a3"
                             *     ] */
                            indexing_md5s?: string[];
                            spans?: {
                                /** @example trace_BKZL_X0TKSD4oa1aBJTc_ */
                                trace_id?: string;
                                /** @example span_h1xUkcUJilhudDrLeQbR_ */
                                span_id?: string;
                                timestamps?: {
                                    /** @example 1721382488392 */
                                    finished_at?: number;
                                    /** @example 1721382492027 */
                                    updated_at?: number;
                                    /** @example 1721382486895 */
                                    started_at?: number;
                                    /** @example 1721382488317 */
                                    first_token_at?: number;
                                    /** @example 1721382492027 */
                                    inserted_at?: number;
                                };
                                /** @example llm */
                                type?: string;
                                /** @example null */
                                error?: {
                                    stacktrace?: string[];
                                    message?: string;
                                    has_error?: boolean;
                                } | null;
                                params?: {
                                    /** @example true */
                                    stream?: boolean;
                                    /** @example 1 */
                                    temperature?: number;
                                };
                                /** @example KAXYxPR8MUgTcP8CF193y */
                                project_id?: string;
                                /** @example span_ijZNjUMTz3ys0Z0YKwF_T */
                                parent_id?: string | null;
                                /** @example null */
                                name?: string | null;
                                /** @example openai/gpt-4o */
                                model?: string;
                                metrics?: {
                                    /** @example true */
                                    tokens_estimated?: boolean;
                                    /** @example 7 */
                                    completion_tokens?: number;
                                    /** @example 20 */
                                    prompt_tokens?: number;
                                };
                                input?: {
                                    /** @example chat_messages */
                                    type?: string;
                                    /** @example [
                                     *       {
                                     *         "role": "system",
                                     *         "content": "You are a helpful assistant that only reply in short tweet-like responses, using lots of emojis."
                                     *       },
                                     *       {
                                     *         "role": "user",
                                     *         "content": "hi"
                                     *       }
                                     *     ] */
                                    value?: {
                                        /** @example system */
                                        role?: string;
                                        /** @example You are a helpful assistant that only reply in short tweet-like responses, using lots of emojis. */
                                        content?: string;
                                    }[];
                                };
                                output?: {
                                    /** @example chat_messages */
                                    type?: string;
                                    /** @example [
                                     *       {
                                     *         "role": "assistant",
                                     *         "content": "Hey there! 👋😊"
                                     *       }
                                     *     ] */
                                    value?: {
                                        /** @example assistant */
                                        role?: string;
                                        /** @example Hey there! 👋😊 */
                                        content?: string;
                                    }[];
                                };
                            }[];
                            evaluations?: {
                                /** @example check_VCagriZHNWICSOM09dXjM */
                                evaluation_id?: string;
                                /** @example Ragas Answer Relevancy */
                                name?: string;
                                /** @example ragas/answer_relevancy */
                                type?: string;
                                /** @example trace_BKZL_X0TKSD4oa1aBJTc_ */
                                trace_id?: string;
                                /** @example KAXYxPR8MUgTcP8CF193y */
                                project_id?: string;
                                /** @example error */
                                status?: string;
                                timestamps?: {
                                    /** @example 1721383657788 */
                                    updated_at?: number;
                                    /** @example 1721382493358 */
                                    inserted_at?: number;
                                };
                                error?: {
                                    /** @example [
                                     *       "TypeError: fetch failed"
                                     *     ] */
                                    stacktrace?: string[];
                                    /** @example fetch failed */
                                    message?: string;
                                    /** @example true */
                                    has_error?: boolean;
                                };
                            }[];
                        };
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trace/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search traces
         * @description Search for traces based on given criteria
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SearchRequest"];
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trace/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns a public path for a trace */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of trace to share */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Public path created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            path?: string;
                        };
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trace/{id}/unshare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Deletes a public path for a trace */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of trace to unshare */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Public path deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                /** @description Unexpected error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset/{slug}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add entries to a dataset */
        post: operations["postApiDatasetBySlugEntries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all prompts for a project */
        get: operations["getApiPrompts"];
        put?: never;
        /** @description Create a new prompt with default initial version */
        post: operations["postApiPrompts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific prompt */
        get: operations["getApiPromptsById"];
        /** @description Update a prompt */
        put: operations["putApiPromptsById"];
        post?: never;
        /** @description Delete a prompt */
        delete: operations["deleteApiPromptsById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{id}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all versions for a prompt */
        get: operations["getApiPromptsByIdVersions"];
        put?: never;
        /** @description Create a new version for a prompt */
        post: operations["postApiPromptsByIdVersions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset/{slugOrId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a dataset by its slug or id. */
        get: operations["getApiDatasetBySlugOrId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scenario-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new scenario event */
        post: operations["postApiScenario-events"];
        /** @description Delete all events */
        delete: operations["deleteApiScenario-events"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Annotation: {
            /** @description The ID of the annotation */
            id?: string;
            /** @description The ID of the project */
            projectId?: string;
            /** @description The ID of the trace */
            traceId?: string;
            /** @description The comment of the annotation */
            comment?: string;
            /** @description The thumbs up status of the annotation */
            isThumbsUp?: boolean;
            /** @description The ID of the user */
            userId?: string;
            /** @description The created at of the annotation */
            createdAt?: string;
            /** @description The updated at of the annotation */
            updatedAt?: string;
            /** @description The email of the user */
            email?: string;
        };
        Error: {
            /** Format: int32 */
            error: number;
            message: string;
        };
        SearchRequest: {
            query?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** @example 1000 */
            pageSize?: number;
            /** @example 123 */
            scrollId?: string;
            filters?: {
                [key: string]: string[];
            };
        };
        SearchResponse: {
            traces?: components["schemas"]["Trace"][];
            pagination?: components["schemas"]["Pagination"];
        };
        Trace: {
            trace_id?: string;
            project_id?: string;
            timestamps?: components["schemas"]["Timestamps"];
            input?: components["schemas"]["Input"];
            output?: components["schemas"]["Output"];
            metadata?: components["schemas"]["Metadata"];
            metrics?: components["schemas"]["Metrics"];
            indexing_md5s?: string[];
            error?: string | null;
            evaluations?: components["schemas"]["Evaluation"][];
            contexts?: unknown[];
        };
        Timestamps: {
            inserted_at?: number;
            started_at?: number;
            updated_at?: number;
        };
        Input: {
            value?: string;
            satisfaction_score?: number;
        };
        Output: {
            value?: string;
        };
        Metadata: {
            sdk_language?: string;
            sdk_version?: string;
        };
        Metrics: {
            tokens_estimated?: boolean;
            completion_tokens?: number;
            prompt_tokens?: number;
            total_cost?: number;
            total_time_ms?: number;
            first_token_ms?: number | null;
        };
        Evaluation: {
            evaluation_id?: string;
            score?: number;
            timestamps?: components["schemas"]["EvaluationTimestamps"];
            evaluator_id?: string;
            name?: string;
            details?: string;
            passed?: boolean;
            label?: string | null;
            type?: string;
            status?: string;
        };
        EvaluationTimestamps: {
            finished_at?: number;
            updated_at?: number;
        };
        Pagination: {
            /** @example 123 */
            scrollId?: string;
            /** @example 1254 */
            totalHits?: number;
        };
        DatasetPostEntries: {
            /** @example [
             *       {
             *         "input": "hi",
             *         "output": "Hello, how can I help you today?"
             *       }
             *     ] */
            entries: {
                [key: string]: unknown;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postApiDatasetBySlugEntries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DatasetPostEntries"];
            };
        };
        responses: never;
    };
    getApiPrompts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        updatedAt: string;
                        version: number;
                        versionId: string;
                        versionCreatedAt: string;
                        model: string;
                        prompt: string;
                        messages: ({
                            /** @enum {string} */
                            role: "user" | "assistant" | "system";
                            content: string;
                        } & {
                            [key: string]: unknown;
                        })[];
                        response_format: {
                            /** @enum {string} */
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                schema: Record<string, never>;
                            };
                        } | null;
                    }[];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    postApiPrompts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        updatedAt: string;
                        version: number;
                        versionId: string;
                        versionCreatedAt: string;
                        model: string;
                        prompt: string;
                        messages: ({
                            /** @enum {string} */
                            role: "user" | "assistant" | "system";
                            content: string;
                        } & {
                            [key: string]: unknown;
                        })[];
                        response_format: {
                            /** @enum {string} */
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                schema: Record<string, never>;
                            };
                        } | null;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    getApiPromptsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        updatedAt: string;
                        version: number;
                        versionId: string;
                        versionCreatedAt: string;
                        model: string;
                        prompt: string;
                        messages: ({
                            /** @enum {string} */
                            role: "user" | "assistant" | "system";
                            content: string;
                        } & {
                            [key: string]: unknown;
                        })[];
                        response_format: {
                            /** @enum {string} */
                            type: "json_schema";
                            json_schema: {
                                name: string;
                                schema: Record<string, never>;
                            };
                        } | null;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    putApiPromptsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    deleteApiPromptsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    getApiPromptsByIdVersions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        authorId: string | null;
                        projectId: string;
                        configId: string;
                        /** @constant */
                        schemaVersion: "1.0";
                        commitMessage?: string | null;
                        version: number;
                        createdAt: string;
                        configData: {
                            version?: number;
                            prompt: string;
                            /** @default [] */
                            messages: ({
                                /** @enum {string} */
                                role: "user" | "assistant" | "system";
                                content: string;
                            } & {
                                [key: string]: unknown;
                            })[];
                            inputs: {
                                identifier: string;
                                /** @enum {string} */
                                type: "str" | "float" | "bool" | "image" | "list[str]" | "list[float]" | "list[int]" | "list[bool]" | "dict";
                            }[];
                            outputs: {
                                identifier: string;
                                /** @enum {string} */
                                type: "str" | "float" | "bool" | "json_schema";
                                json_schema?: {
                                    type: string;
                                } & {
                                    [key: string]: unknown;
                                };
                            }[];
                            model: string;
                            temperature?: number;
                            max_tokens?: number;
                            demonstrations: {
                                columns: {
                                    id: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "string" | "boolean" | "number" | "date" | "list" | "json" | "spans" | "rag_contexts" | "chat_messages" | "annotations" | "evaluations";
                                }[];
                                /** @default [] */
                                rows: ({
                                    id: string;
                                } & {
                                    [key: string]: unknown;
                                })[];
                            };
                            prompting_technique?: {
                                ref?: string;
                            };
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    postApiPromptsByIdVersions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    id?: string;
                    authorId?: string | null;
                    projectId: string;
                    configId: string;
                    /** @constant */
                    schemaVersion: "1.0";
                    commitMessage: string;
                    version: number;
                    createdAt?: string;
                    configData: {
                        version?: number;
                        prompt: string;
                        /** @default [] */
                        messages?: ({
                            /** @enum {string} */
                            role: "user" | "assistant" | "system";
                            content: string;
                        } & {
                            [key: string]: unknown;
                        })[];
                        inputs: {
                            identifier: string;
                            /** @enum {string} */
                            type: "str" | "float" | "bool" | "image" | "list[str]" | "list[float]" | "list[int]" | "list[bool]" | "dict";
                        }[];
                        outputs: {
                            identifier: string;
                            /** @enum {string} */
                            type: "str" | "float" | "bool" | "json_schema";
                            json_schema?: {
                                type: string;
                            } & {
                                [key: string]: unknown;
                            };
                        }[];
                        model: string;
                        temperature?: number;
                        max_tokens?: number;
                        demonstrations: {
                            columns: {
                                id: string;
                                name: string;
                                /** @enum {string} */
                                type: "string" | "boolean" | "number" | "date" | "list" | "json" | "spans" | "rag_contexts" | "chat_messages" | "annotations" | "evaluations";
                            }[];
                            /** @default [] */
                            rows?: ({
                                id: string;
                            } & {
                                [key: string]: unknown;
                            })[];
                        };
                        prompting_technique?: {
                            ref?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        authorId: string | null;
                        projectId: string;
                        configId: string;
                        /** @constant */
                        schemaVersion: "1.0";
                        commitMessage?: string | null;
                        version: number;
                        createdAt: string;
                        configData: {
                            version?: number;
                            prompt: string;
                            /** @default [] */
                            messages: ({
                                /** @enum {string} */
                                role: "user" | "assistant" | "system";
                                content: string;
                            } & {
                                [key: string]: unknown;
                            })[];
                            inputs: {
                                identifier: string;
                                /** @enum {string} */
                                type: "str" | "float" | "bool" | "image" | "list[str]" | "list[float]" | "list[int]" | "list[bool]" | "dict";
                            }[];
                            outputs: {
                                identifier: string;
                                /** @enum {string} */
                                type: "str" | "float" | "bool" | "json_schema";
                                json_schema?: {
                                    type: string;
                                } & {
                                    [key: string]: unknown;
                                };
                            }[];
                            model: string;
                            temperature?: number;
                            max_tokens?: number;
                            demonstrations: {
                                columns: {
                                    id: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "string" | "boolean" | "number" | "date" | "list" | "json" | "spans" | "rag_contexts" | "chat_messages" | "annotations" | "evaluations";
                                }[];
                                /** @default [] */
                                rows: ({
                                    id: string;
                                } & {
                                    [key: string]: unknown;
                                })[];
                            };
                            prompting_technique?: {
                                ref?: string;
                            };
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Bad Request";
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        error: "Unauthorized";
                    };
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    getApiDatasetBySlugOrId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slugOrId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            datasetId: string;
                            projectId: string;
                            entry: {
                                [key: string]: unknown;
                            };
                            createdAt: string;
                            updatedAt: string;
                        }[];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        /** @default error */
                        status: string;
                        message: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        /** @default error */
                        status: string;
                        message: string;
                    };
                };
            };
            /** @description Dataset not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        /** @default error */
                        status: string;
                        message: string;
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default error */
                        status: string;
                        message: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        /** @default error */
                        status: string;
                        message: string;
                    };
                };
            };
        };
    };
    "postApiScenario-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @constant */
                    type: "SCENARIO_RUN_STARTED";
                    timestamp: number;
                    rawEvent?: unknown;
                    batchRunId: string;
                    scenarioId: string;
                    scenarioRunId: string;
                    /** @default default */
                    scenarioSetId?: string;
                    metadata: {
                        name?: string;
                        description?: string;
                    };
                } | {
                    /** @constant */
                    type: "SCENARIO_RUN_FINISHED";
                    timestamp: number;
                    rawEvent?: unknown;
                    batchRunId: string;
                    scenarioId: string;
                    scenarioRunId: string;
                    /** @default default */
                    scenarioSetId?: string;
                    /** @enum {string} */
                    status: "SUCCESS" | "ERROR" | "CANCELLED" | "IN_PROGRESS" | "PENDING" | "FAILED";
                    results?: {
                        /** @enum {string} */
                        verdict: "success" | "failure" | "inconclusive";
                        reasoning?: string;
                        metCriteria: string[];
                        unmetCriteria: string[];
                        error?: string;
                    } | null;
                } | {
                    /** @constant */
                    type: "SCENARIO_MESSAGE_SNAPSHOT";
                    timestamp: number;
                    rawEvent?: unknown;
                    messages: ({
                        id: string;
                        /** @constant */
                        role: "developer";
                        content: string;
                        name?: string;
                    } | {
                        id: string;
                        /** @constant */
                        role: "system";
                        content: string;
                        name?: string;
                    } | {
                        id: string;
                        /** @constant */
                        role: "assistant";
                        content?: string;
                        name?: string;
                        toolCalls?: {
                            id: string;
                            /** @constant */
                            type: "function";
                            function: {
                                name: string;
                                arguments: string;
                            };
                        }[];
                    } | {
                        id: string;
                        /** @constant */
                        role: "user";
                        content: string;
                        name?: string;
                    } | {
                        id: string;
                        content: string;
                        /** @constant */
                        role: "tool";
                        toolCallId: string;
                    })[];
                    batchRunId: string;
                    scenarioId: string;
                    scenarioRunId: string;
                    /** @default default */
                    scenarioSetId?: string;
                };
            };
        };
        responses: {
            /** @description Event created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        url?: string | null;
                    };
                };
            };
            /** @description Invalid event data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
    "deleteApiScenario-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        url?: string | null;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                    };
                };
            };
        };
    };
}
