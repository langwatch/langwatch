{{- include "langwatch.validateSecrets" . }}
{{- if not .Values.secrets.existingSecret }}
{{- if .Values.autogen.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name) }}
  labels:
    {{- include "langwatch.labels" . | nindent 4 }}
type: Opaque
data:
  {{- $existingSecret := lookup "v1" "Secret" .Release.Namespace (.Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name)) }}
  {{- if $existingSecret }}
  # Reuse existing secret data
  {{- range $key, $value := $existingSecret.data }}
  {{ $key }}: {{ $value }}
  {{- end }}
  {{- else }}
  # Generate new secrets on first install
  {{- if .Values.app.credentialsEncryptionKey.value }}
  credentialsEncryptionKey: {{ .Values.app.credentialsEncryptionKey.value | b64enc | quote }}
  {{- else }}
  credentialsEncryptionKey: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.cronApiKey.value }}
  cronApiKey: {{ .Values.app.cronApiKey.value | b64enc | quote }}
  {{- else }}
  cronApiKey: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.nextAuth.secret.value }}
  nextAuthSecret: {{ .Values.app.nextAuth.secret.value | b64enc | quote }}
  {{- else }}
  nextAuthSecret: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}
