{{- include "langwatch.validateSecrets" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-app
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "langwatch.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.app.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-app
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-app
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.global.monitoring.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.app.service.port }}"
      {{- end }}
    spec:
      # Pod security context
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
      # Node selection
      {{- with .Values.global.scheduling.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.scheduling.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.scheduling.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-opensearch
        image: curlimages/curl:latest
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for OpenSearch service..."
            until curl -s -f "http://{{ .Release.Name }}-opensearch:9200/_cluster/health" | grep -q '"status":"green"\|"status":"yellow"'; do
              echo "OpenSearch not ready yet, waiting..."
              sleep 5
            done
            echo "OpenSearch is ready!"
      containers:
        - name: {{ .Chart.Name }}-app
          securityContext:
            {{- toYaml .Values.global.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.images.app.repository }}:{{ .Values.images.app.tag }}"
          imagePullPolicy: "{{ .Values.images.app.pullPolicy }}"
          ports:
            - name: http
              containerPort: {{ .Values.app.service.port }}
              protocol: TCP
          env:
            {{- include "langwatch.postgresqlEnvSet" . | nindent 12 }}
            {{- include "langwatch.redisEnvSet" . | nindent 12 }}
            {{- include "langwatch.opensearchEnvSet" . | nindent 12 }}

            - name: SKIP_ENV_VALIDATION
              value: "true"
            - name: DISABLE_PII_REDACTION
              value: "true"
            - name: IS_OPENSEARCH
              value: "true"

            # Computed internal service URLs
            - name: LANGWATCH_NLP_SERVICE
              value: "http://{{ .Release.Name }}-langwatch-nlp:5561"
            - name: LANGEVALS_ENDPOINT
              value: "http://{{ .Release.Name }}-langevals:5562"
            - name: BASE_HOST
              value: "http://localhost:5560"
            - name: NEXTAUTH_URL
              value: "http://localhost:5560"

            # Secret-based environment variables
            - name: API_TOKEN_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name) }}
                  key: "API_TOKEN_JWT_SECRET"
            - name: CRON_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name) }}
                  key: "CRON_API_KEY"
            - name: METRICS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name) }}
                  key: "METRICS_API_KEY"
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.autogen.secretNames.app | default (printf "%s-app-secrets" .Release.Name) }}
                  key: "NEXTAUTH_SECRET"

            # Non-secret environment variables
            {{- range $key, $value := .Values.app.env }}
            - name: {{ $key }}
              value: {{ tpl $value $ | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
      volumes:
        - name: tmp-dir
          emptyDir: {}
