# Global configuration
global:
  env: production
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  scheduling:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  monitoring:
    enabled: false
    prometheusAnnotations: true

# Secrets configuration
secrets:
  # Production mode: reference to existing secret
  existingSecret: ""
  # Secret keys mapping (can be customized if needed)
  secretKeys:
    API_TOKEN_JWT_SECRET: "API_TOKEN_JWT_SECRET"
    CRON_API_KEY: "CRON_API_KEY"
    METRICS_API_KEY: "METRICS_API_KEY"
    NEXTAUTH_SECRET: "NEXTAUTH_SECRET"

# Auto-generation mode (development only)
autogen:
  enabled: false
  # Secret names for each service (auto-generated if not specified)
  secretNames:
    app: "" # defaults to {{ .Release.Name }}-app-secrets
    langevals: "" # defaults to {{ .Release.Name }}-langevals-secrets
    langwatch_nlp: "" # defaults to {{ .Release.Name }}-langwatch-nlp-secrets

# Image configurations
images:
  app:
    repository: langwatch/langwatch
    tag: latest
    pullPolicy: Always
  langwatch_nlp:
    repository: langwatch/langwatch_nlp
    tag: latest
    pullPolicy: Always
  langevals:
    repository: langwatch/langevals
    tag: latest
    pullPolicy: Always

# Prometheus monitoring configuration
prometheus:
  chartManaged: true # true for chart-managed, false for external

  external:
    # Reference to existing secret containing Prometheus connection details
    existingSecret: ""
    secretKeys:
      host: "host"
      port: "port"
      username: "username" # Optional for basic auth
      password: "password" # Optional for basic auth
      # Optional: full connection string
      connectionString: "connection-string"

  # Prometheus server configuration
  server:
    # Global Prometheus configuration
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    # Persistence configuration
    persistence:
      enabled: true
      size: 6Gi
      storageClass: ""

    # Retention and resources
    retention: 60d
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 2Gi

    # RBAC configuration (enabled by default)
    rbac:
      create: true
      includeDefaultRules: true

    # ServiceAccount configuration
    serviceAccount:
      create: true

    service:
      type: ClusterIP
      port: 9090

    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      fsGroup: 65534

# Service configurations
app:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 5560
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1024Mi

langwatch_nlp:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 5561
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
    limits:
      cpu: 1000m
      memory: 2048Mi
  env:
    LANGWATCH_ENDPOINT: "http://{{ .Release.Name }}-app:5560"
    # For when running on minikube on Mac OS
    # STUDIO_RUNTIME: "async"

langevals:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 5562
  resources:
    requests:
      cpu: 500m
      memory: 4096Mi
    limits:
      cpu: 1000m
      memory: 6144Mi

postgresql:
  chartManaged: true # true for chart-managed, false for external

  # External PostgreSQL (when chartManaged: false)
  external:
    # Reference to existing secret containing connection details
    existingSecret: ""
    secretKeys:
      host: "host"
      port: "port"
      database: "database"
      username: "username"
      password: "password"
      # Optional: full connection string as alternative
      connectionString: "connection-string"
      # SSL configuration keys in secret
      sslMode: "ssl-mode"
      sslCert: "ssl-cert"
      sslKey: "ssl-key"
      sslRootCert: "ssl-root-cert"

  auth:
    username: postgres  # Use default Bitnami username
    password: ""        # You must set this, it will not be auto-generated
    database: mydb

  image:
    tag: 16.6.0-debian-12-r2

  postgresqlDataDir: /var/lib/postgresql/data/pgdata

  volumePermissions:
    enabled: true

  primary:
    persistence:
      enabled: true
      # if you are migrating from a `langwatch-helm` version before 1.0.0, you can set
      # this property and value your values.yaml file, and you will not lose any data
      # from the previous deployment

      # existingClaim: "data-langwatch-postgres-0"
      mountPath: /var/lib/postgresql/data
      size: 10Gi
      storageClass: ""

      readinessProbe:
        enabled: true
      livenessProbe:
        enabled: true

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

opensearch:
  chartManaged: true # true for chart-managed, false for external

  external:
    # Reference to existing secret containing OpenSearch connection details
    existingSecret: ""
    secretKeys:
      host: "host"
      port: "port"
      username: "username" # Optional for auth
      password: "password" # Optional for auth
      # Optional: full connection string as alternative
      connectionString: "connection-string"
      # SSL configuration if needed
      sslCert: "ssl-cert"
      sslKey: "ssl-key"
      sslRootCert: "ssl-root-cert"

  # We only run a single node, so no need to deal with the suffixes
  auth:
    adminPassword: "" # Will be auto-generated if not provided
    existingSecret: "" # Use existing secret for production
    secretKeys:
      adminPasswordKey: "admin-password"

  fullnameOverride: langwatch-opensearch
  masterService: langwatch-opensearch
  clusterName: langwatch-opensearch
  replicas: 1

  config:
    opensearch.yml: |
      cluster.name: langwatch-opensearch
      node.name: langwatch-opensearch
      network.host: 0.0.0.0
      discovery.type: single-node
      plugins.security.disabled: true

  extraEnvs:
  - name: cluster.initial_master_nodes
    value: ""   # force empty so the setting is gone

  persistence:
    enabled: true
    size: 10Gi
    accessModes: [ReadWriteOnce]
    # storageClass: <set if you donâ€™t have a default>

  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1
      memory: 2Gi

redis:
  chartManaged: true # true for chart-managed, false for external

  external:
    # Reference to existing secret containing Redis connection details
    existingSecret: ""
    secretKeys:
      host: "host"
      port: "port"
      password: "password" # Optional for auth
      username: "username" # Optional for Redis 6+ ACL
      # Optional: full connection string as alternative
      connectionString: "connection-string"

  # Built-in Redis configuration (when chartManaged: true)
  # Uses Bitnami Redis chart dependency

  auth:
    enabled: true
    password: "" # Will be auto-generated if not provided
    existingSecret: "" # Use existing secret for production
    secretKeys:
      passwordKey: "password"

  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 300m
        memory: 256Mi

# CronJobs configuration
cronjobs:
  enabled: true
  # Global cronjob configuration
  image:
    repository: curlimages/curl
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 64Mi

  # Individual cronjob configurations
  jobs:
    topicClustering:
      enabled: true
      schedule: "0 0 * * *" # At midnight every day
      endpoint: "/api/cron/schedule_topic_clustering"

    alertTriggers:
      enabled: true
      schedule: "*/3 * * * *" # Every 3 minutes
      endpoint: "/api/cron/triggers"

    tracesRetentionCleanup:
      enabled: true
      schedule: "0 1 * * *" # At 1 AM every day
      endpoint: "/api/cron/traces_retention_period_cleanup"

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: "langwatch-app"
                port:
                  number: 5560
  tls: []
