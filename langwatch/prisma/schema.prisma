// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(nanoid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(nanoid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                      String                   @id @default(nanoid())
    name                    String?
    email                   String?                  @unique
    emailVerified           DateTime?
    password                String?                  // for email/password auth without auth0
    image                   String?                  @db.Text
    accounts                Account[]
    sessions                Session[]
    teamMemberships         TeamUser[]
    orgMemberships          OrganizationUser[]
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @default(now()) @updatedAt
    lastLoginAt             DateTime?
    Annotation              Annotation[]
    publicShares            PublicShare[]
    Workflow                Workflow[]
    WorkflowVersion         WorkflowVersion[]
    annotationQueues        AnnotationQueueMembers[]
    assignedQueueItems      AnnotationQueueItem[]    @relation("AssignedTo")
    createdQueueItems       AnnotationQueueItem[]    @relation("CreatedBy")
    llmPromptConfigVersions LlmPromptConfigVersion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TeamUserRole {
    ADMIN
    MEMBER
    VIEWER
}

enum OrganizationUserRole {
    ADMIN
    MEMBER
    EXTERNAL
}

model TeamUser {
    userId    String
    teamId    String
    role      TeamUserRole
    user      User         @relation(fields: [userId], references: [id])
    team      Team         @relation(fields: [teamId], references: [id])
    createdAt DateTime     @default(now())
    updatedAt DateTime     @default(now()) @updatedAt

    @@id([userId, teamId])
    @@index([teamId])
    @@index([userId])
}

model OrganizationUser {
    userId         String
    organizationId String
    role           OrganizationUserRole
    user           User                 @relation(fields: [userId], references: [id])
    organization   Organization         @relation(fields: [organizationId], references: [id])
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @default(now()) @updatedAt

    @@id([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

model Team {
    id             String       @id @default(nanoid())
    name           String
    slug           String       @unique
    members        TeamUser[]
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    projects       Project[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now()) @updatedAt

    @@index([organizationId])
}

model Organization {
    id                     String               @id @default(nanoid())
    name                   String
    phoneNumber            String?
    slug                   String               @unique
    members                OrganizationUser[]
    teams                  Team[]
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @default(now()) @updatedAt
    OrganizationInvite     OrganizationInvite[]
    usageSpendingMaxLimit  Int?
    signupData             Json?
    signedDPA              Boolean              @default(false)
    elasticsearchNodeUrl   String?
    elasticsearchApiKey    String?
    useCustomElasticsearch Boolean              @default(false)
    s3Endpoint             String?
    s3AccessKeyId          String?
    s3SecretAccessKey      String?
    s3Bucket               String?
    useCustomS3            Boolean              @default(false)

    promoCode String?
    features  OrganizationFeature[]
}

enum PIIRedactionLevel {
    STRICT
    ESSENTIAL
    DISABLED
}

model Project {
    id                   String                @id @default(nanoid())
    name                 String
    slug                 String                @unique
    apiKey               String                @unique
    teamId               String
    team                 Team                  @relation(fields: [teamId], references: [id])
    language             String
    framework            String
    firstMessage         Boolean               @default(false)
    integrated           Boolean               @default(false)
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @default(now()) @updatedAt
    userLinkTemplate     String?
    checks               Monitor[]
    costs                Cost[]
    topics               Topic[]
    datasets             Dataset[]
    datasetRecords       DatasetRecord[]
    customGraphs         CustomGraph[]
    batchEvaluations     BatchEvaluation[]
    piiRedactionLevel    PIIRedactionLevel     @default(ESSENTIAL)
    triggers             Trigger[]
    experiments          Experiment[]
    annotations          Annotation[]
    modelProviders       ModelProvider[]
    defaultModel         String?
    topicClusteringModel String?
    embeddingsModel      String?
    TriggerSent          TriggerSent[]
    annotationScores     AnnotationScore[]
    publicShares         PublicShare[]
    workflows            Workflow[]
    WorkflowVersion      WorkflowVersion[]
    AnnotationQueue      AnnotationQueue[]
    AnnotationQueueItem  AnnotationQueueItem[]
    s3Endpoint           String?
    s3AccessKeyId        String?
    s3SecretAccessKey    String?
    s3Bucket             String?
    llmPromptConfigs     LlmPromptConfig[]

    @@index([teamId])
}

enum INVITE_STATUS {
    PENDING
    ACCEPTED
}

model OrganizationInvite {
    id             String               @id @default(nanoid())
    email          String
    inviteCode     String               @unique
    expiration     DateTime
    status         INVITE_STATUS        @default(PENDING)
    organizationId String
    organization   Organization         @relation(fields: [organizationId], references: [id])
    teamIds        String
    role           OrganizationUserRole
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @default(now()) @updatedAt

    @@index([organizationId])
}

enum EvaluationExecutionMode {
    ON_MESSAGE
    AS_GUARDRAIL
    MANUALLY
}

model Monitor {
    id            String                  @id @default(nanoid())
    projectId     String
    project       Project                 @relation(fields: [projectId], references: [id])
    experimentId  String?                 @unique
    experiment    Experiment?             @relation(fields: [experimentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    checkType     String
    name          String
    slug          String
    executionMode EvaluationExecutionMode @default(ON_MESSAGE)
    enabled       Boolean                 @default(true)
    preconditions Json
    parameters    Json
    mappings      Json?
    sample        Float                   @default(1.0)
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @default(now()) @updatedAt

    @@unique([projectId, slug])
    @@index([projectId])
}

enum CostType {
    TRACE_CHECK
    GUARDRAIL
    CLUSTERING
    BATCH_EVALUATION
}

enum CostReferenceType {
    CHECK
    TRACE
    PROJECT
    BATCH
}

model Cost {
    id            String            @id @default(nanoid())
    projectId     String
    project       Project           @relation(fields: [projectId], references: [id])
    costType      CostType
    costName      String?
    referenceType CostReferenceType
    referenceId   String
    amount        Float
    currency      String
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @default(now()) @updatedAt
    extraInfo     Json?

    @@index([referenceType, referenceId])
    @@index([costType])
    @@index([projectId])
}

model Topic {
    id        String  @id @default(nanoid())
    projectId String
    project   Project @relation(fields: [projectId], references: [id])
    name      String
    parentId  String?
    parent    Topic?  @relation("Subtopics", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    subtopics Topic[] @relation("Subtopics")

    embeddings_model       String
    centroid               Json
    p95Distance            Float
    automaticallyGenerated Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([parentId])
    @@index([projectId])
}

model Dataset {
    id               String            @id @default(nanoid())
    projectId        String
    project          Project           @relation(fields: [projectId], references: [id])
    name             String
    slug             String
    columnTypes      Json
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
    archivedAt       DateTime?
    datasetRecords   DatasetRecord[]
    batchEvaluations BatchEvaluation[]
    mapping          Json?
    useS3            Boolean           @default(false)
    s3RecordCount    Int?

    @@unique([projectId, slug])
}

model DatasetRecord {
    id        String   @id @default(nanoid())
    datasetId String
    dataset   Dataset  @relation(fields: [datasetId], references: [id])
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    entry     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([datasetId])
    @@index([projectId])
    @@index([createdAt])
}

model CustomGraph {
    id        String   @id @default(nanoid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    name      String
    graph     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([id])
    @@index([projectId])
}

model BatchEvaluation {
    id           String     @id @default(nanoid())
    experimentId String
    experiment   Experiment @relation(fields: [experimentId], references: [id])
    projectId    String
    project      Project    @relation(fields: [projectId], references: [id])
    data         Json       @default("{}")
    status       String
    score        Float
    label        String?
    passed       Boolean
    details      String
    cost         Float
    datasetSlug  String
    datasetId    String
    dataset      Dataset    @relation(fields: [datasetId], references: [id])
    evaluation   String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @default(now()) @updatedAt

    @@unique([id])
    @@index([projectId])
    @@index([datasetId])
    @@index([experimentId])
}

enum TriggerAction {
    SEND_EMAIL
    ADD_TO_DATASET
    ADD_TO_ANNOTATION_QUEUE
    SEND_SLACK_MESSAGE
}

enum AlertType {
    CRITICAL
    WARNING
    INFO
}

model Trigger {
    id           String        @id @default(nanoid())
    name         String
    projectId    String
    project      Project       @relation(fields: [projectId], references: [id])
    action       TriggerAction
    actionParams Json
    filters      Json
    lastRunAt    Float         @default(0)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt
    active       Boolean       @default(true)
    message      String?
    deleted      Boolean       @default(false)
    alertType    AlertType?
    TriggerSent  TriggerSent[]

    @@index([projectId])
}

enum ExperimentType {
    DSPY
    BATCH_EVALUATION
    BATCH_EVALUATION_V2
}

model Experiment {
    id               String            @id @default(nanoid())
    name             String?
    type             ExperimentType
    slug             String
    projectId        String
    project          Project           @relation(fields: [projectId], references: [id])
    workflowId       String?
    workflow         Workflow?         @relation(fields: [workflowId], references: [id])
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
    batchEvaluations BatchEvaluation[]
    wizardState      Json?
    monitor          Monitor?

    @@unique([projectId, slug])
    @@index([projectId])
    @@index([workflowId])
}

model Annotation {
    id             String   @id @default(nanoid())
    projectId      String
    project        Project  @relation(fields: [projectId], references: [id])
    traceId        String
    comment        String?
    isThumbsUp     Boolean?
    userId         String?
    user           User?    @relation(fields: [userId], references: [id])
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt
    email          String?
    scoreOptions   Json?
    expectedOutput String?

    @@index([projectId])
    @@index([traceId])
    @@index([userId])
}

model ModelProvider {
    id                     String   @id @default(nanoid())
    projectId              String
    project                Project  @relation(fields: [projectId], references: [id])
    provider               String
    enabled                Boolean
    customKeys             Json?
    customModels           Json?
    customEmbeddingsModels Json?
    deploymentMapping      Json?
    createdAt              DateTime @default(now())
    updatedAt              DateTime @default(now()) @updatedAt

    @@index([projectId])
}

model TriggerSent {
    id        String   @id @default(nanoid())
    triggerId String
    traceId   String
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    trigger   Trigger  @relation(fields: [triggerId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([triggerId, traceId])
    @@index([triggerId])
    @@index([projectId])
}

enum AnnotationScoreDataType {
    CATEGORICAL
    BOOLEAN
    LIKERT
    OPTION
    CHECKBOX
}

model AnnotationScore {
    id                    String                   @id @default(nanoid())
    name                  String
    projectId             String
    project               Project                  @relation(fields: [projectId], references: [id])
    createdAt             DateTime                 @default(now())
    updatedAt             DateTime                 @default(now()) @updatedAt
    deletedAt             DateTime?
    description           String?
    active                Boolean                  @default(true)
    dataType              AnnotationScoreDataType?
    options               Json?
    defaultValue          Json?
    global                Boolean                  @default(false)
    AnnotationQueueScores AnnotationQueueScores[]

    @@index([projectId])
}

enum PublicShareResourceTypes {
    TRACE
    THREAD
}

model AnnotationQueue {
    id                    String                   @id @default(nanoid())
    name                  String
    slug                  String
    projectId             String
    description           String?
    project               Project                  @relation(fields: [projectId], references: [id])
    members               AnnotationQueueMembers[]
    createdAt             DateTime                 @default(now())
    updatedAt             DateTime                 @default(now()) @updatedAt
    AnnotationQueueScores AnnotationQueueScores[]
    AnnotationQueueItems  AnnotationQueueItem[]

    @@unique([projectId, slug])
}

model AnnotationQueueMembers {
    annotationQueueId String
    userId            String
    user              User            @relation(fields: [userId], references: [id])
    annotationQueue   AnnotationQueue @relation(fields: [annotationQueueId], references: [id])

    @@id([annotationQueueId, userId])
    @@index([annotationQueueId])
    @@index([userId])
}

model AnnotationQueueScores {
    annotationQueueId String
    annotationScoreId String
    annotationScore   AnnotationScore @relation(fields: [annotationScoreId], references: [id])
    annotationQueue   AnnotationQueue @relation(fields: [annotationQueueId], references: [id])

    @@id([annotationQueueId, annotationScoreId])
    @@index([annotationQueueId])
    @@index([annotationScoreId])
}

model AnnotationQueueItem {
    id                String           @id @default(nanoid())
    annotationQueueId String?
    annotationQueue   AnnotationQueue? @relation(fields: [annotationQueueId], references: [id])
    userId            String?
    user              User?            @relation("AssignedTo", fields: [userId], references: [id])
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @default(now()) @updatedAt
    createdByUserId   String?
    createdByUser     User?            @relation("CreatedBy", fields: [createdByUserId], references: [id])
    traceId           String
    projectId         String
    doneAt            DateTime?
    project           Project          @relation(fields: [projectId], references: [id])

    @@unique([traceId, userId, projectId])
    @@unique([traceId, annotationQueueId, projectId])
    @@index([annotationQueueId])
    @@index([userId])
    @@index([projectId])
}

model PublicShare {
    id           String                   @id @default(nanoid())
    resourceType PublicShareResourceTypes
    resourceId   String
    projectId    String
    project      Project                  @relation(fields: [projectId], references: [id])
    userId       String?
    user         User?                    @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([projectId, resourceType, resourceId])
    @@index([userId])
}

model CustomLLMModelCost {
    id                 String   @id @default(nanoid())
    projectId          String
    model              String
    regex              String
    inputCostPerToken  Float?
    outputCostPerToken Float?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @default(now()) @updatedAt

    @@index([projectId])
}

model Workflow {
    id               String            @id @default(nanoid())
    projectId        String
    project          Project           @relation(fields: [projectId], references: [id])
    name             String
    icon             String
    description      String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
    latestVersionId  String?
    latestVersion    WorkflowVersion?  @relation("LatestVersion", fields: [latestVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    currentVersionId String?
    currentVersion   WorkflowVersion?  @relation("CurrentVersion", fields: [currentVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    versions         WorkflowVersion[] @relation("Versions")
    publishedId      String?
    publishedById    String?
    publishedBy      User?             @relation(fields: [publishedById], references: [id])
    archivedAt       DateTime?
    experiments      Experiment[]
    isEvaluator      Boolean           @default(false)
    isComponent      Boolean           @default(false)

    @@index([projectId])
    @@index([publishedById])
    @@index([latestVersionId])
    @@index([currentVersionId])
}

model WorkflowVersion {
    id                       String            @id @default(nanoid())
    version                  String
    commitMessage            String
    authorId                 String
    author                   User              @relation(fields: [authorId], references: [id])
    projectId                String
    project                  Project           @relation(fields: [projectId], references: [id])
    workflowId               String
    workflow                 Workflow          @relation("Versions", fields: [workflowId], references: [id])
    parentId                 String?
    parent                   WorkflowVersion?  @relation("WorkflowVersionHistory", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    children                 WorkflowVersion[] @relation("WorkflowVersionHistory")
    autoSaved                Boolean           @default(false)
    createdAt                DateTime          @default(now())
    updatedAt                DateTime          @default(now()) @updatedAt
    dsl                      Json
    WorkflowAsLatestVersion  Workflow[]        @relation("LatestVersion")
    WorkflowAsCurrentVersion Workflow[]        @relation("CurrentVersion")

    @@unique([workflowId, version])
    @@index([workflowId])
    @@index([projectId])
    @@index([parentId])
    @@index([authorId])
    @@index([createdAt])
}

model OrganizationFeature {
    id             String       @id @default(nanoid())
    feature        String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now()) @updatedAt
    trialEndDate   DateTime?

    @@unique([feature, organizationId])
    @@index([feature])
    @@index([organizationId])
}

model AuditLog {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    userId         String
    projectId      String?
    organizationId String?
    action         String
    args           Json?
    error          String?
    ipAddress      String?
    userAgent      String?
    metadata       Json?

    @@index([createdAt])
    @@index([userId])
    @@index([projectId])
    @@index([organizationId])
    @@index([action])
    @@index([ipAddress])
}

model LlmPromptConfig {
  id        String   @id @default(nanoid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relation to all versions - latest is determined by query
  versions  LlmPromptConfigVersion[] @relation("Versions")

  @@index([projectId])
}

model LlmPromptConfigVersion {
  id            String          @id @default(nanoid())
  version       Int             @default(autoincrement())
  commitMessage String?         // Optional: Describe changes in this version
  authorId      String?         // Optional: User who created this version
  author        User?           @relation(fields: [authorId], references: [id])
  configId      String          // Foreign key to the parent LlmPromptConfig
  config        LlmPromptConfig @relation("Versions", fields: [configId], references: [id], onDelete: Cascade) // Cascade delete versions if parent is deleted

  // Version specific data
  configData    Json            @map("config") // The actual config JSON for this version
  schemaVersion String          // Schema version for this specific configData

  createdAt     DateTime        @default(now()) // Used to determine the latest version

  // Required for multi-tenancy
  projectId String

  @@unique([configId, version]) // Each version number must be unique per config
  @@index([configId])
  @@index([authorId])
  @@index([createdAt])          // Index important for finding the latest efficiently
}