name: langwatch-app-ci

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "langwatch/**"
  workflow_dispatch:

jobs:
 typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "langwatch/package-lock.json"

      - name: Install dependencies
        working-directory: langwatch
        run: npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: Prepare files
        working-directory: langwatch
        run: npm run start:prepare:files

      - name: Install TypeScript Native Preview
        working-directory: langwatch
        run: npm install -D @typescript/native-preview

      - name: Run typecheck
        working-directory: langwatch
        # TODO: Use tsgo once it's out of preview
        run: ./node_modules/.bin/tsc --noEmit --project ./tsconfig.json

  test-unit:
    env:
      # Required environment variables for build-time validation
      # These are dummy values to satisfy the schema during CI
      DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
      BASE_HOST: "localhost:3000"
      NEXTAUTH_SECRET: "dummy-secret-for-ci"
      NEXTAUTH_URL: "http://localhost:3000"
      API_TOKEN_JWT_SECRET: "dummy-jwt-secret-for-ci"
      ELASTICSEARCH_NODE_URL: "http://localhost:9200"
      BUILD_TIME: "true"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "langwatch/package-lock.json"

      - name: Install dependencies
        working-directory: langwatch
        run: npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: Prepare files
        working-directory: langwatch
        run: npm run start:prepare:files

      - name: Run unit tests
        working-directory: langwatch
        run: npm run test:unit -- --run --bail=1

  test-integration:
    env:
      # Required environment variables for integration tests
      DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
      BASE_HOST: "localhost:3000"
      NEXTAUTH_SECRET: "dummy-secret-for-ci"
      NEXTAUTH_URL: "http://localhost:3000"
      API_TOKEN_JWT_SECRET: "dummy-jwt-secret-for-ci"
      ELASTICSEARCH_NODE_URL: "http://localhost:9200"
      REDIS_URL: "redis://localhost:6379"
      BUILD_TIME: "true"

    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "langwatch/package-lock.json"

      - name: Install dependencies
        working-directory: langwatch
        run: npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: Prepare files
        working-directory: langwatch
        run: npm run start:prepare:files

      - name: Wait for services
        run: |
          # Wait for Redis
          timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
          # Wait for Elasticsearch
          timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'

      - name: Run integration tests
        working-directory: langwatch
        run: npm run test:integration -- --run --bail=1 --poolOptions.forks.singleFork

   build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v4
        id: modules-cache
        with:
          path: langwatch/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('langwatch/package-lock.json') }}
          restore-keys: ${{ runner.os }}-modules-

      - name: Cache Next.js
        id: next-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            langwatch/.next/cache/webpack
            langwatch/.next/cache/swc
          key: ${{ runner.os }}-nextjs-${{ hashFiles('langwatch/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('langwatch/package-lock.json') }}-

      - name: Install dependencies
        if: steps.modules-cache.outputs.cache-hit != 'true'
        working-directory: langwatch
        run: npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: Build
        working-directory: langwatch
        run: npm run build

      - name: Save Next.js cache
        if: steps.next-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            langwatch/.next/cache/webpack
            langwatch/.next/cache/swc
          key: ${{ steps.next-cache.outputs.cache-primary-key }}
