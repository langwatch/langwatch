name: sdk-javascript-cd

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  publish-sdk-npm:
    if: startsWith(github.event.release.tag_name, 'typescript-sdk@') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10.12.1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: "typescript-sdk/pnpm-lock.yaml"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        working-directory: typescript-sdk
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        working-directory: ./typescript-sdk
        env:
          OPENAI_API_KEY: ${{ secrets.TYPESCRIPT_SDK_OPENAI_API_KEY }}
          LANGWATCH_API_KEY: ${{ secrets.TYPESCRIPT_SDK_LANGWATCH_API_KEY }}
        run: pnpm test

      - name: Build
        working-directory: ./typescript-sdk
        run: pnpm build

      ## We run these against the current codebase for the CI build
      ## but here we want to validate the SDK against the deployed app
      ## before publishing
      - name: Run e2e tests
        env:
          OPENAI_API_KEY: ${{ secrets.TYPESCRIPT_SDK_OPENAI_API_KEY }}
          E2E_LANGWATCH_API_KEY: ${{ secrets.TYPESCRIPT_SDK_E2E_LANGWATCH_API_KEY }}
        run: pnpm test:e2e

      - name: Publish to npm
        working-directory: ./typescript-sdk
        run: pnpm publish --provenance --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get version from tag or manifest
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/typescript-sdk@v}
          else
            VERSION=$(cat .github/.release-please-manifest.json | jq -r '."typescript-sdk"')
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Notify Slack
        env:
          SLACK_RELEASE_NOTIFICATION_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_NOTIFICATION_WEBHOOK_URL }}
        run: |
          bash .github/scripts/notify-slack-release.sh \
            typescript-sdk/CHANGELOG.md \
            "TypeScript SDK" \
            "${{ steps.get_version.outputs.version }}"
