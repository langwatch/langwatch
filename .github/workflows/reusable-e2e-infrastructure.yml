name: E2E Infrastructure and Tests

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory to run tests in'
        required: true
        type: string
      setup-command:
        description: 'Command to setup test dependencies'
        required: false
        type: string
        default: ''
      test-command:
        description: 'Command to run E2E tests'
        required: true
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
    secrets:
      OPENAI_API_KEY:
        required: true

env:
  NODE_ENV: "test"
  DATABASE_URL: "postgresql://langwatch_ci:ci_password@localhost:5432/langwatch_test"
  BASE_HOST: "localhost:3000"
  NEXTAUTH_SECRET: "nextauth-secret-for-ci-testing"
  NEXTAUTH_URL: "http://localhost:3000"
  API_TOKEN_JWT_SECRET: "api-jwt-secret-for-ci-testing"
  ELASTICSEARCH_NODE_URL: "http://localhost:9200"
  REDIS_URL: "redis://localhost:6379"
  BUILD_TIME: "true"
  E2E_LANGWATCH_API_KEY: "sk-lw-test-api-key-for-cli-e2e-tests-123456789012345678901234567890123456"

jobs:
  e2e:
    runs-on: ubuntu-latest
    
    # Each workflow call gets its own isolated services
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: langwatch_ci
          POSTGRES_PASSWORD: ci_password
          POSTGRES_DB: langwatch_test
        options: >-
          --health-cmd "pg_isready -U langwatch_ci"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
          cache-dependency-path: "langwatch/package-lock.json"

      # Setup LangWatch infrastructure
      - name: Install LangWatch dependencies
        working-directory: langwatch
        run: npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: Prepare LangWatch files
        working-directory: langwatch
        run: npm run start:prepare:files

      - name: Setup database
        working-directory: langwatch
        run: npm run prisma:migrate

      - name: Setup Elasticsearch
        working-directory: langwatch
        run: npm run elastic:migrate

      - name: Seed database
        working-directory: langwatch
        run: npx prisma db seed

      - name: Start test server
        working-directory: langwatch
        run: |
          npm run dev &
          echo $! > server.pid
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do sleep 2; done'
          echo "âœ… LangWatch server is ready at http://localhost:3000"

      # Setup test dependencies (if provided)
      - name: Setup test dependencies
        if: inputs.setup-command != ''
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.setup-command }}

      # Run the actual tests
      - name: Run E2E tests
        working-directory: ${{ inputs.working-directory }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGWATCH_API_KEY: ${{ env.E2E_LANGWATCH_API_KEY }}
          E2E_LANGWATCH_API_KEY: ${{ env.E2E_LANGWATCH_API_KEY }}
          LANGWATCH_ENDPOINT: "http://localhost:3000"
          LANGWATCH_API_URL: "http://localhost:3000"
        run: ${{ inputs.test-command }}

      - name: Stop test server
        if: always()
        working-directory: langwatch
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi